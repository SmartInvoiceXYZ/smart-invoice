type Invoice @entity {
  id: ID!
  network: String!
  address: Bytes!
  factoryAddress: Bytes!
  token: Bytes!
  client: Bytes!
  provider: Bytes!
  resolverType: ADR!
  resolver: Bytes!
  resolutionRate: BigInt!
  isLocked: Boolean!
  amounts: [BigInt!]!
  numMilestones: Int!
  currentMilestone: BigInt!
  total: BigInt!
  released: BigInt!
  createdAt: BigInt! # seconds since epoch
  creationTxHash: Bytes!
  terminationTime: BigInt! # seconds since epoch
  details: Bytes!
  ipfsHash: String!
  disputeId: BigInt!
  projectName: String!
  projectDescription: String!
  projectAgreement: String!
  startDate: BigInt # seconds since epoch
  endDate: BigInt # seconds since epoch
  deposits: [Deposit!]!
  withdraws: [Withdraw!]!
  releases: [Release!]!
  disputes: [Dispute!]!
  resolutions: [Resolution!]!
  tokenMetadata: Token!
}

enum ADR @entity {
  individual
  arbitrator
}

type Deposit @entity {
  id: ID!
  txHash: Bytes!
  sender: Bytes!
  invoice: Invoice!
  amount: BigInt!
  timestamp: BigInt!
}


type Release @entity {
  id: ID!
  txHash: Bytes!
  invoice: Invoice!
  milestone: BigInt!
  amount: BigInt!
  timestamp: BigInt!
}

type Withdraw @entity {
  id: ID!
  txHash: Bytes!
  invoice: Invoice!
  amount: BigInt!
  timestamp: BigInt!
}

type Dispute @entity {
  id: ID!
  txHash: Bytes!
  invoice: Invoice!
  sender: Bytes!
  details: Bytes!
  ipfsHash: String!
  disputeToken: Bytes # only arbitrator
  disputeFee: BigInt # only arbitrator
  disputeId: BigInt # only arbitrator
  timestamp: BigInt!
}

type Resolution @entity {
  id: ID!
  txHash: Bytes!
  details: Bytes!
  ipfsHash: String!
  invoice: Invoice!
  resolverType: ADR!
  resolver: Bytes!
  clientAward: BigInt!
  providerAward: BigInt!
  resolutionDetails: Bytes # only individual
  resolutionFee: BigInt # only individual
  ruling: BigInt # only arbitrator
  timestamp: BigInt!
}

type Token @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
}
